/* DO NOT EDIT THIS FILE - it is machine generated */
#define LOG_TAG "MicnumDecodejni"
#include <jni.h>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include "TLMicLog.h"
#include "tlmicdes.h"

/* Header for class com_example_micserialnumdes_MicnumDecode */

MicNumDecode micNumDecode;
char* jstring2string(JNIEnv* env, jstring jstr){
    char* rtn = NULL;
    jclass clsstring = env->FindClass("java/lang/String");
    jstring strencode = env->NewStringUTF("utf-8");
    jmethodID mid = env->GetMethodID(clsstring, "getBytes", "(Ljava/lang/String;)[B");
    jbyteArray barr= (jbyteArray)env->CallObjectMethod(jstr, mid, strencode);
    jsize alen = env->GetArrayLength(barr);
    jbyte* ba = env->GetByteArrayElements(barr, JNI_FALSE);
    if (alen > 0){
        rtn = (char*)malloc(alen + 1);
        memcpy(rtn, ba, alen);
        rtn[alen] = 0;
    }
    env->ReleaseByteArrayElements(barr, ba, 0);
    return rtn;
}

jstring char2Jstring(JNIEnv* env, const char* pat) {
    jclass strClass = env->FindClass("java/lang/String");
    jmethodID ctorID = env->GetMethodID(strClass, "<init>", "([BLjava/lang/String;)V");
    jbyteArray bytes = env->NewByteArray(strlen(pat));
    env->SetByteArrayRegion(bytes, 0, strlen(pat), (jbyte *) pat);
    jstring encoding = env->NewStringUTF("utf-8");
    return (jstring) env->NewObject(strClass, ctorID, bytes, encoding);
}


#ifdef __cplusplus
extern "C" {
#endif

/*
 * Class:     com_example_micserialnumdes_MicnumDecode
 * Method:    isHIDdmic
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_example_micserialnumdes_MicnumDecode_isHIDdmic
  (JNIEnv * env, jobject obj){
    return micNumDecode.isHIDdmic();
}

/*
 * Class:     com_example_micserialnumdes_MicnumDecode
 * Method:    keyID
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_example_micserialnumdes_MicnumDecode_hidkeyID
  (JNIEnv * env, jobject obj){
    return micNumDecode.hidkeyID();
}

#ifdef __cplusplus
}
#endif

extern "C"
JNIEXPORT jint JNICALL
Java_com_example_micserialnumdes_MicnumDecode_setSerialnum(JNIEnv *env, jobject thiz, jstring num) {
    // TODO: implement setSerialnum()
    if(num == nullptr)
        return -1;
    char* micnum = jstring2string(env,num);
    int res = micNumDecode.setSerialnum(micnum);
    free(micnum);
    return res;
}extern "C"
JNIEXPORT jstring JNICALL
Java_com_example_micserialnumdes_MicnumDecode_getdecode(JNIEnv *env, jobject thiz) {
    // TODO: implement getdecode()
    char* decodemicnum = micNumDecode.getdecode();
    return char2Jstring(env,decodemicnum);
}