/* DO NOT EDIT THIS FILE - it is machine generated */

#define LOG_TAG "JNIAGC"
#include "OboeResampler.hh"

#include <jni.h>
#include <stdlib.h> // for NULL
#include <assert.h>
#include <string.h>
#include <wktimer.h>

extern "C" {
#include "gain_control.h"
/* Header for class com_example_webrtcsingelproc_AgcUtils */
}
#include "Platform.h"

#include "TLMicLog.h"

#ifndef _Included_com_example_webrtcsingelproc_AgcUtils
#define _Included_com_example_webrtcsingelproc_AgcUtils

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Class:     com_example_webrtcsingelproc_AgcUtils
 * Method:    create
 * Signature: ()I
 */
JNIEXPORT jlong JNICALL Java_com_example_webrtcsingelproc_AgcUtils_create
        (JNIEnv *env, jobject jclazz){

    void *agcInstance = NULL;
    WebRtcAgc_Create(&agcInstance);
    return ((long) agcInstance);

}

int framesperproc = 80;
int bytesizeperframes = 2;


short cacheinbuf[160000]={};
int cacheinbufsamples = 0;
int cacheinbufreadptr = 0;
short cacheoutbuf[160000]={};
int cacheoutbufsamples = 0;
int cacheoutbufwriteptr = 0;
short channelconverbuffer[160000]={};
FILE* fptest = 0;
OboeResampler resampler;
wktimer timer;
/*
 * Class:     com_example_webrtcsingelproc_AgcUtils
 * Method:    init
 * Signature: (IIIII)I
 */
JNIEXPORT jint JNICALL Java_com_example_webrtcsingelproc_AgcUtils_init
        (JNIEnv *env, jobject jclazz, jlong agcInstance, jint minLevel, jint maxLevel, jint agcMode, jint fs){

    void *agcInst = (void *) agcInstance;
    if (agcInst == NULL)
        return -5;

    memset(cacheinbuf,0,160000*sizeof(short));
    memset(cacheoutbuf,0,160000*sizeof(short));
    cacheinbufsamples = 0;
    cacheinbufreadptr = 0;
    cacheoutbufsamples = 0;
    cacheoutbufwriteptr = 0;
    fptest = fopen("/sdcard/agc_test.pcm","wb+");
//    resample
    resampler.init(32000,44100,1);
    return WebRtcAgc_Init(agcInst,minLevel,maxLevel,kAgcModeFixedDigital,fs);
}

/*
 * Class:     com_example_webrtcsingelproc_AgcUtils
 * Method:    free
 * Signature: (I)V
 */
JNIEXPORT jint JNICALL Java_com_example_webrtcsingelproc_AgcUtils_free
(JNIEnv *env, jobject jclazz, jlong agcInstance){
    void *agcInst = (void *) agcInstance;
    if (agcInst == NULL)
        return -2;
    return WebRtcAgc_Free(agcInst);

}
unsigned int convert_monostereo(char* src_buf, unsigned int src_len, char* dst_buf, unsigned int dst_len)
{
    int i;
    uint16_t *pstr=(uint16_t*)src_buf;
    uint16_t *pdtr=(uint16_t*)dst_buf;
    if(!src_buf || !src_len || !dst_buf || !dst_len) {
        fprintf(stderr,"Error parameter for convert\n");
        return 0;
    }

    if (src_len*2 > dst_len) {
        fprintf(stderr,"Dest buffer is not enough\n");
        return 0;
    }

    for (i=0;i<src_len;i+=2) {
        *pdtr++=*pstr;
        *pdtr++=*pstr++;
    }
    return i*2;
}
/*
 * Class:     com_example_webrtcsingelproc_AgcUtils
 * Method:    process
 * Signature: (I[SII[SIIII)I
 */
JNIEXPORT jint JNICALL Java_com_example_webrtcsingelproc_AgcUtils_process
        (JNIEnv *env, jobject jclazz, jlong agcInstance,  jshortArray inNear, jint num_bands, jint samples, jshortArray out, jint inMicLevel, jint outMicLevel, jint echo, jint saturationWarning){
        DLOG(" ");
        int16_t *arrNear = NULL;
        int16_t *arrOut = NULL;
        int32_t outMicLevel1 = NULL;
        uint8_t test = NULL;
        const int16_t* inNear_H = NULL;
        int16_t* out_H = NULL;
        DLOG(" ");

        void *agcInst = (void *) agcInstance;
        if(agcInst == NULL)
        return -1;

        int ret = -1;


        arrNear = env->GetShortArrayElements(inNear, NULL);
        arrOut = env->GetShortArrayElements(out, NULL);
//        DLOG("  cacheinbufsamples=%d,cacheinbufreadptr=%d,cacheoutbufsamples=%d,cacheoutbufwriteptr=%d",cacheinbufsamples,cacheinbufreadptr,cacheoutbufsamples,cacheoutbufwriteptr);

//        int needsamples = samples+(framesperproc-(samples%framesperproc));
        memcpy(cacheinbuf+cacheinbufsamples,arrNear,samples*bytesizeperframes);
        cacheinbufsamples += samples;

//        DLOG(" cacheinbufsamples=%d,cacheinbufreadptr=%d,cacheoutbufsamples=%d,cacheoutbufwriteptr=%d",cacheinbufsamples,cacheinbufreadptr,cacheoutbufsamples,cacheoutbufwriteptr);

        int loopcount = (samples - cacheoutbufsamples)/framesperproc;
        if((samples - cacheoutbufsamples)%framesperproc != 0){
            loopcount += 1;
        }
        if(cacheinbufsamples < loopcount*framesperproc){
            return -2;
        }
//        timer.pcmblock(1,8000,2,samples*2);
        for (int i = 0; i < loopcount; ++i) {
            ret = WebRtcAgc_Process(agcInst,cacheinbuf+cacheinbufreadptr,inNear_H,framesperproc,cacheoutbuf+(cacheoutbufwriteptr),out_H,inMicLevel,&outMicLevel1,echo,&test);
//            fwrite(cacheinbuf+cacheinbufreadptr,1,framesperproc*bytesizeperframes,fptest);
            cacheinbufreadptr += framesperproc;
            cacheoutbufwriteptr += framesperproc;
            cacheoutbufsamples += framesperproc;
        }
//        DLOG(" loopcount =%d, cacheinbufsamples=%d,cacheinbufreadptr=%d,cacheoutbufsamples=%d,cacheoutbufwriteptr=%d",loopcount,cacheinbufsamples,cacheinbufreadptr,cacheoutbufsamples,cacheoutbufwriteptr);

        memcpy(arrOut,cacheoutbuf,samples*bytesizeperframes);
        ret = resampler.onProcess(cacheoutbuf,samples,channelconverbuffer);
        //声道转换
        if(ret > 0){
            convert_monostereo((char*)channelconverbuffer,ret*2,(char*)arrOut,ret*4);
            ret *= 2;
        }

        memcpy(cacheoutbuf,cacheoutbuf+samples,(cacheoutbufsamples-samples)*bytesizeperframes);
        cacheoutbufsamples -= samples;
        cacheoutbufwriteptr -= samples;
//        DLOG(" loopcount =%d, cacheinbufsamples=%d,cacheinbufreadptr=%d,cacheoutbufsamples=%d,cacheoutbufwriteptr=%d",loopcount,cacheinbufsamples,cacheinbufreadptr,cacheoutbufsamples,cacheoutbufwriteptr);
        memcpy(cacheinbuf,cacheinbuf+cacheinbufreadptr,(cacheinbufsamples-cacheinbufreadptr)*bytesizeperframes);
        cacheinbufsamples -= cacheinbufreadptr;
        cacheinbufreadptr = 0;
//        DLOG(" loopcount =%d, cacheinbufsamples=%d,cacheinbufreadptr=%d,cacheoutbufsamples=%d,cacheoutbufwriteptr=%d",loopcount,cacheinbufsamples,cacheinbufreadptr,cacheoutbufsamples,cacheoutbufwriteptr);

        //release and send the changes back to java side.
        env->ReleaseShortArrayElements(inNear, arrNear, 0);
        env->ReleaseShortArrayElements(out, arrOut, 0);

         return ret;
}

/*
 * Class:     com_example_webrtcsingelproc_AgcUtils
 * Method:    setConfig
 * Signature: (ILcom/wzc/agc/AgcUtils/WebRtcAgcConfig;)I
 */
JNIEXPORT jint JNICALL Java_com_example_webrtcsingelproc_AgcUtils_setConfig
        (JNIEnv *env, jobject jclazz, jlong agcInstance, jobject agcConfig){

        void * agcInst = (void *) agcInstance;
        if (agcInst == NULL)
        return -1;

        jclass JavaWebRtcAgcConfig = env->GetObjectClass(agcConfig);
        assert(JavaWebRtcAgcConfig != NULL);
        jfieldID targetLevelDbfsID = env->GetFieldID(JavaWebRtcAgcConfig, "targetLevelDbfs",
                                       "I");
        jfieldID compressionGaindBID = env->GetFieldID(JavaWebRtcAgcConfig, "compressionGaindB",
                                      "I");
        jfieldID limiterEnableID = env->GetFieldID(JavaWebRtcAgcConfig, "limiterEnable",
                                      "I");
        if (targetLevelDbfsID == NULL || compressionGaindBID == NULL || limiterEnableID == NULL)
        return -1;

        int targetLevelDbfsMode = env->GetIntField(agcConfig, targetLevelDbfsID);
        int compressionGaindBMode = env->GetIntField(agcConfig, compressionGaindBID);
        int limiterEnableMode = env->GetIntField(agcConfig, limiterEnableID);

        WebRtcAgc_config_t config;
        config.targetLevelDbfs = targetLevelDbfsMode;
        config.compressionGaindB = compressionGaindBMode;
        config.limiterEnable = limiterEnableMode;

        return WebRtcAgc_set_config(agcInst,config);
}

/*
 * Class:     com_example_webrtcsingelproc_AgcUtils
 * Method:    addFarend
 * Signature: (I[SI)I
 */
JNIEXPORT jint JNICALL Java_com_example_webrtcsingelproc_AgcUtils_addFarend
        (JNIEnv *env, jobject jclazz, jlong agcInstance, jshortArray inFar, jint samples){
    return 0;
}

/*
 * Class:     com_example_webrtcsingelproc_AgcUtils
 * Method:    addMic
 * Signature: (I[SII)I
 */
JNIEXPORT jint JNICALL Java_com_example_webrtcsingelproc_AgcUtils_addMic
        (JNIEnv *env, jobject jclazz, jlong agcInstance, jshortArray inMic, jint num_bands, jint samples){
    return 0;
}

/*
 * Class:     com_example_webrtcsingelproc_AgcUtils
 * Method:    getConfig
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_example_webrtcsingelproc_AgcUtils_getConfig
        (JNIEnv *, jobject);

/*
 * Class:     com_example_webrtcsingelproc_AgcUtils
 * Method:    virtualMic
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_example_webrtcsingelproc_AgcUtils_virtualMic
        (JNIEnv *, jobject);

/*
 * Class:     com_example_webrtcsingelproc_AgcUtils
 * Method:    getAddFarendError
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_example_webrtcsingelproc_AgcUtils_getAddFarendError
        (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
