#ifndef _Included_com_example_hash_md5_MD5Check
#define _Included_com_example_hash_md5_MD5Check
/* DO NOT EDIT THIS FILE - it is machine generated */
#define LOG_TAG "MD5Check"
#include <jni.h>
/* Header for class com_example_hash_md5_MD5Check */
#include <hashlibpp.h>
#include <string>
#include <iostream>
#include "include/hashlibpp.h"
#include "TLMicLog.h"

#ifdef __cplusplus
extern "C" {
#endif

hashwrapper *myWrapper = new md5wrapper();

char* jstring2string(JNIEnv* env, jstring jstr)
{
    char* rtn = NULL;
    jclass clsstring = env->FindClass("java/lang/String");
    jstring strencode = env->NewStringUTF("utf-8");
    jmethodID mid = env->GetMethodID(clsstring, "getBytes", "(Ljava/lang/String;)[B");
    jbyteArray barr= (jbyteArray)env->CallObjectMethod(jstr, mid, strencode);
    jsize alen = env->GetArrayLength(barr);
    jbyte* ba = env->GetByteArrayElements(barr, JNI_FALSE);

    if (alen > 0)
    {
        rtn = (char*)malloc(alen + 1);

        memcpy(rtn, ba, alen);
        rtn[alen] = 0;
    }
    env->ReleaseByteArrayElements(barr, ba, 0);
    return rtn;
}

jstring char2Jstring(JNIEnv* env, const char* pat) {
    jclass strClass = env->FindClass("java/lang/String");
    jmethodID ctorID = env->GetMethodID(strClass, "<init>", "([BLjava/lang/String;)V");
    jbyteArray bytes = env->NewByteArray(strlen(pat));
    env->SetByteArrayRegion(bytes, 0, strlen(pat), (jbyte *) pat);
    jstring encoding = env->NewStringUTF("utf-8");
    return (jstring) env->NewObject(strClass, ctorID, bytes, encoding);
}


/*
 * Class:     com_example_hash_md5_MD5Check
 * Method:    getMD5FromString
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_example_hash_1md5_MD5Check_getMD5FromString
  (JNIEnv * env, jobject obj, jstring jstr){
    char* needcheckstr = 0;
    needcheckstr = jstring2string(env,jstr);
    std::string hash1 = myWrapper->getHashFromString(needcheckstr);
    free(needcheckstr);
    return char2Jstring(env,hash1.c_str());
}

/*
 * Class:     com_example_hash_md5_MD5Check
 * Method:    getMD5FromFile
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_example_hash_1md5_MD5Check_getMD5FromFile
  (JNIEnv * env, jobject obj, jstring jstr){
    char* needcheckstr = 0;
    DLOG("fun =%s linenum=%d",__FUNCTION__,__LINE__);
    needcheckstr = jstring2string(env,jstr);
    DLOG("fun =%s linenum=%d needcheckstr=%s",__FUNCTION__,__LINE__,needcheckstr);
    std::string hash2 = myWrapper->getHashFromFile(needcheckstr);
    DLOG("fun =%s linenum=%d",__FUNCTION__,__LINE__);
    return char2Jstring(env,hash2.c_str());
}

#ifdef __cplusplus
}
#endif
#endif
